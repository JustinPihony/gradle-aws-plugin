// -*- coding: utf-8; mode: groovy -*-

buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.10.RELEASE"
		classpath "jp.classmethod.aws:gradle-aws-plugin:0.37-2-+"
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: "jp.classmethod.aws.beanstalk"

// ==== Project settings

group = 'jp.classmethod.aws.gradle.sample'
version = '0.1-SNAPSHOT'
ext.artifactId = '05-beanstalk'

ext.timestamp = new Date().format("yyyyMMdd'_'HHmmss", TimeZone.default)
ext.versionDesc = "${version}-${timestamp}"

ext.defaultEncoding = 'UTF-8'
sourceCompatibility = targetCompatibility = 1.8
tasks.withType(AbstractCompile) each {
	it.options.encoding = ext.defaultEncoding
}

repositories {
	jcenter()
	mavenCentral()
	maven { url 'http://repo.spring.io/release' }
}

dependencies {
	compile "org.springframework.boot:spring-boot-starter-web"
}


// ==== AWS settings

aws {
	profileName = "default"
	region = "ap-northeast-1"
	
	beanstalk {
		appName = "05-beanstalk"
		appDesc = "gradle-aws-plugin demo application"

		version {
			label = "05-beanstalk-${versionDesc}"
			description = "${artifactId} v${version}"
			bucket = "elasticbeanstalk-${aws.region}-${aws.accountId}"
			key = "eb-apps/${artifactId}/${artifactId}-${versionDesc}.zip"
		}

		configurationTemplates {
			production {
				optionSettings = file("src/main/config/production.json")
				solutionStackName = "64bit Amazon Linux 2017.09 v2.9.1 running Docker 17.12.0-ce"
			}
			development {
				optionSettings = file("src/main/config/development.json")
				solutionStackName = "64bit Amazon Linux 2017.09 v2.9.1 running Docker 17.12.0-ce"
			}
		}

		environment {
			envName = "05-beanstalk-blue"
			envDesc = "foobar demo application blue environment"
			templateName = "development"
			versionLabel = "05-beanstalk-${versionDesc}"
			tags = [
					VERSION: "${versionDesc}".toString(),
					GROUP  : "Eng"
			]
		}
	}
}


// ==== Other tasks

task createDockerfile(type: Copy, dependsOn: jar) {
	from "src/main/bundle/Dockerfile"
	into "build/bundle"
	expand(jarFilename: jar.archiveName, artifactId: project.artifactId)
}

task createBundleResources(type: Copy) {
	from "src/main/bundle"
	into "build/bundle"
	exclude "src/main/bundle/Dockerfile"
}

task createBundle(type: Zip, dependsOn: [createDockerfile, createBundleResources, bootRepackage]) {
	archiveName = jar.archiveName.substring(0, jar.archiveName.length() - 4) + ".zip"
	from "build/bundle"
	from jar.archivePath
}

task uploadBundle(type: jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask, dependsOn: createBundle) {
	group "AWS"
	description "Upload ${artifactId} application bundle file to S3."
	
	bucketName "elasticbeanstalk-${aws.region}-${aws.accountId}"
	key "eb-apps/${artifactId}/${artifactId}-${versionDesc}.zip"
	file project.createBundle.archivePath
	overwrite project.version.endsWith("-SNAPSHOT")
}

awsEbCreateApplicationVersion.dependsOn uploadBundle
